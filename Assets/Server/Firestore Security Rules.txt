rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {  
    match /messages/{documentId} {
    	// All senders and receivers and read their own documents.
    	allow read: if
      	request.auth.token.name == existingData().sender ||
      	request.auth.token.name == existingData().receiver;
      
      // All senders can create their own documents.
      allow create: if
      	isValidString("content", 1, 1000000000) &&
        isValidString("id", 23, 23) &&
        incomingData().id == request.resource.id &&
        incomingData().isDeleted is bool &&
        incomingData().isDeleted == false &&
        incomingData().isRead is bool &&
        incomingData().isRead == false &&
        isValidString("receiver", 6, 30) &&
        isValidString("sender", 6, 30) &&
      	incomingData().sender == request.auth.token.name &&
        isValidTimestamp("sentTime");
      
      // Any receiver can update all documents' isRead and isDeleted fields.
      allow update: if
      	request.auth.token.name == incomingData().receiver &&
      	isNotUpdating("content") &&
        isNotUpdating("id") &&
        incomingData().isDeleted is bool &&
        incomingData().isRead is bool &&
        incomingData().isDeleted != incomingData().isRead &&
        isNotUpdating("receiver") &&
        isNotUpdating("sender") &&
        isNotUpdating("sentTime");
      
      // No one can delete any document.
      allow delete: if false;
    }

    function existingData() {
    	return resource.data;
    }
    
    function incomingData() {
    	return request.resource.data;
    }
  
	  function isNotUpdating(field) {
			return
    		!(field in incomingData()) ||
  			existingData()[field] == incomingData()[field];
		}
  
  	function isValidTimestamp(field) {
  		return
    		incomingData()[field] is timestamp &&
    		incomingData()[field] < request.time;
  	}
  	
  	function isValidString(field, minLength, maxLength) {
  		return
    		incomingData()[field] is string &&
    		incomingData()[field].size() >= minLength &&
    	  incomingData()[field].size() <= maxLength;
  	}
  }
}

